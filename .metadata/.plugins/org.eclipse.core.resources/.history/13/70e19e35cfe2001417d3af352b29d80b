
/**
 * Write a description of class MatrixTools here.
 * 
 * @author ML 
 * @version 09.12.14
 */
public class MatrixTools
{
	public void print(String[][] matrix){

		String[][] printMatrix = new String[matrix.length+1][matrix.length+1];

		for(int i = 0; i < printMatrix.length; i++){

			for(int j = 0; j < printMatrix.length; j++){

				if(i == 0){
					if(j == 0){
						printMatrix[i][j] = " x ";
					}
					else{
						printMatrix[i][j] = " " + j + " ";
					}
				}
				else{
					if(j == 0){
						printMatrix[i][j] = " " + i + " ";
					}
					else{
						int index = i-1;
						int jIndex = j-1;

						printMatrix[i][j] = matrix[index][jIndex];
					}
				}
			}

		}


		for(int i = 0; i < printMatrix[0].length; i++){
			IO.print("\u250C");
			for(int k = 0; k < printMatrix[0].length; k++){
				if(k == 0){
					IO.print("\u2500\u2500\u2500");
				}
				else{
					IO.print("\u2500\u2500\u2500\u2500");
				}
			}
			IO.print("\u2510");
			IO.println("");
			for(int j = 0; j < printMatrix.length; j++){
				IO.print("\u2502" + printMatrix[j][i]);
				//IO.print("\t");
			}

			IO.print("\u2502");
			IO.println("");
		}
		IO.print("\u2514");

		for(int l = 0; l < printMatrix[0].length; l++){
			if(l == 0){
				IO.print("\u2500\u2500\u2500");
			}
			else{
				IO.print("\u2500\u2500\u2500\u2500");
			}
		}
		IO.print("\u2518");
		IO.println("");

	}

	public String[][] initMatrix(String[][] matrix){	

		for(int i = 0; i < matrix[0].length; i++){
			for(int j = 0; j < matrix.length; j++){
				//Füllt Matrix mit Tilde Symbol 
				matrix[j][i] = " \u223C ";

			}
		}
		return matrix;
	}

	public String[][] addMatrix(int ival, int jval, char orientation, String[][]matrix, EShipType ship ){	
		//Koordinaten beginnen ab 1, Array aber ab 0 daher um 1 inkrementieren für equivalenten Wert
		ival--;
		jval--;

		String shipSymbol = "X";
		int length = 0;

		switch(ship){
		case DESTROYER:
			shipSymbol = "D";
			length = 5;
			break;

		case FRIGATE:
			shipSymbol = "F";
			length = 4;
			break;

		case CORVETTE:
			shipSymbol = "C";
			length = 3;
			break;

		case SUBMARINE:
			shipSymbol = "S";
			length = 2;
			break;
		}

		if(orientation == 'v'){
			for(int j = jval; j < jval + length; j++){
				//Füllt Matrix mit ShiffZahl Symbol 
				matrix[ival][j] = " "+ shipSymbol+" ";
			}
		}
		else{

			for(int i = ival; i < ival+length; i++){
				//Füllt Matrix mit ShiffZahl Symbol 
				matrix[i][jval] = " "+ shipSymbol+" ";
			}
		}
		return matrix;
	}

	public boolean checkFields(int ival, int jval, char orientation, String[][]matrix, EShipType ship){
		//Koordinaten beginnen ab 1, Array aber ab 0 daher um 1 inkrementieren für equivalenten Wert
		ival--;
		jval--;

		int length = 0;

		switch(ship){
		case DESTROYER:
			length = 5;
			break;

		case FRIGATE:
			length = 4;
			break;

		case CORVETTE:
			length = 3;
			break;

		case SUBMARINE:
			length = 2;
			break;
		}

		int jIndex = jval;
		int iIndex = ival;
		int jDifTop = 1;
		int iDifLeft = 1;
		int jDifBottom = 1;
		int iDifRight = 1;

		if(orientation == 'v'){
			//obere Ecke
			if(jIndex == 0){
				jDifTop = 0;
			}
			//linke Ecke
			if(iIndex == 0){
				iDifLeft = 0;
			}
			//untere Ecke
			if( (jIndex + length) == matrix.length){
				jDifBottom = 0;
			}
			//rechte Ecke
			if(iIndex == (matrix.length - 1) ){
				iDifRight = 0;
			}

			int shipLength = jIndex + length;

			/*Wenn die Schiffslänge ab der gewählten Startkoordinaten 
			 * länger ist als die Feldlänge, ist eine positionierung nicht möglich
			 */
			if( (jIndex + shipLength) > matrix.length){
				return false;
			}

			/*
			 * Ansonsten, prüfe nun ob das Schiff in Vertikaler ausrichtung 
			 * an ein anderes Schiff anrenzt
			 */
			for(int j = (jIndex - jDifTop); j <= (shipLength + jDifBottom); j++ ){
				for( int i = (iIndex - iDifLeft); i <= (iIndex + iDifRight); i++){
					IO.println("j: " + j + " i: " + i);
					if(matrix[i][j] != " \u223C "){
						return false;
					}
				}
			}
		}
		else{

			//obere Ecke
			if(jIndex == 0){
				jDifTop = 0;
			}
			//linke Ecke
			if(iIndex == 0){
				iDifLeft = 0;
			}
			//untere Ecke
			if( jIndex == (matrix.length - 1) ){
				jDifBottom = 0;
			}
			//rechte Ecke
			if( (iIndex + length ) == matrix.length ){
				iDifRight = 0;
			}
			int shipLength = iIndex + length;

			/*Wenn die Schiffslänge ab der gewählten Startkoordinaten 
			 * länger ist als die Feldlänge, ist eine positionierung nicht möglich
			 */
			if( (iIndex + shipLength) > matrix.length){
				return false;
			}

			/*
			 * Ansonsten, prüfe nun ob das Schiff in Vertikaler ausrichtung 
			 * an ein anderes Schiff anrenzt
			 */
			for(int j = (jIndex - jDifTop); j <= (jIndex + jDifBottom); j++ ){
				for( int i = (iIndex - iDifLeft); i < (shipLength + iDifRight); i++){
					IO.println("j: " + j + " i: " + i);
					if(matrix[i][j] != " \u223C "){
						return false;
					}
				}
			}
		}



		//
		//		if(orientation == 'v'){
		//			if( (jval + length) > matrix.length){
		//				return false;
		//			}
		//			else{
		//				for(int j = jval; j < jval+length; j++){
		//					//Prüft Matrix auf Shiffe 
		//					//Prüfe Position auf Nachbarn
		//					int jIndex = j;
		//					int iIndex = ival;
		//					int jDifTop = 1;
		//					int iDifLeft = 1;
		//					int jDifBottom = 1;
		//					int iDifRight = 1;
		//
		//					//obere Ecke
		//					if(j == 0){
		//						jDifTop = 0;
		//					}
		//					//linke Ecke
		//					if(ival == 0){
		//						iDifLeft = 0;
		//					}
		//					//untere Ecke
		//					if(j == matrix.length-1){
		//						jDifBottom = 0;
		//					}
		//					//rechte Ecke
		//					if(ival == matrix.length-1){
		//						iDifRight = 0;
		//					}
		//
		//					//1.Feld
		//					if(j == jval){
		//						for(int k = jIndex - jDifTop; k <= jIndex; k++){
		//							for(int l = iIndex - iDifLeft ; l <= iIndex + iDifRight; l++){
		//								if(matrix[k][l] != " \u223C "){
		//									return false;
		//								}
		//							}
		//						}
		//					}
		//					//Alle Schiffpositionen innerhalb
		//					else if(j < (jval + length) - 1){
		//						for(int l = iIndex - iDifLeft; l <= iIndex + iDifRight; l++){
		//							if(matrix[j][l] != " \u223C "){
		//								return false;
		//							}
		//						}
		//					}
		//					//Letzte Schiffposition
		//					else{
		//						for(int k = jIndex; k <= jIndex + jDifBottom; k++){
		//							for(int l = iIndex - iDifLeft; l <= iIndex + iDifRight; l++){
		//								if(matrix[k][l] != " \u223C "){
		//									return false;
		//								}
		//							}
		//						}
		//					}
		//				}
		//			}
		//		}
		//		else if(orientation == 'h'){
		//			if( (ival + length) > matrix.length){
		//				return false;
		//			}
		//			else{
		//				for(int i = ival; i < (ival + length); i++){
		//					//Prüft Matrix auf Shiffe 
		//					//Prüfe Position auf Nachbarn
		//					int iIndex = i;
		//					int jIndex = jval;
		//					int jDifTop = 1;
		//					int iDifLeft = 1;
		//					int jDifBottom = 1;
		//					int iDifRight = 1;
		//
		//					//obere Ecke
		//					if(jval == 0){
		//						jDifTop = 0;
		//					}
		//					//linke Ecke
		//					if(i == 0){
		//						iDifLeft = 0;
		//					}
		//					//untere Ecke
		//					if(jval == (matrix.length-1) ){
		//						jDifBottom = 0;
		//					}
		//					//rechte Ecke
		//					if(i == (matrix.length-1) ){
		//						iDifRight = 0;
		//					}
		//
		//					//1.Feld
		//
		//					if(i == ival){
		//						for(int k = (iIndex - iDifLeft); k <= (iIndex + iDifRight); k++){
		//							for(int l = (jIndex - jDifTop); l <= (jIndex + jDifBottom); l++){
		//								if(matrix[k][l] != " \u223C "){
		//									return false;
		//								}
		//							}
		//						}
		//					}
		//					//Alle Schiffpositionen innerhalb
		//					else if(i < (ival+length) - 1){
		//						for(int l = jIndex - jDifTop; l <= jIndex + jDifBottom; l++){
		//							if(matrix[l][i] != " \u223C "){
		//								return false;
		//							}
		//						}
		//					}
		//					//Letzte Schiffposition
		//					else{
		//						for(int k = iIndex; k <= iIndex + iDifRight; k++){
		//							for(int l = jIndex - jDifTop; l <= jIndex + jDifBottom; l++){
		//								if(matrix[k][l] != " \u223C "){
		//									return false;
		//								}
		//							}
		//						}
		//					}
		//				}
		//			}
		//		}
		return true;

	}

}
