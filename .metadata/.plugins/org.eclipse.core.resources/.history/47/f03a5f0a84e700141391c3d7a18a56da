package GameLogic;
import GameFields.BattleField;
import GamePlayer.Player;
import GameTools.EShipType;
import GameTools.IO;


/**
 * Write a description of class GameStructure here.
 * 
 * @author (ML) 
 * @version (v 1.0.0 13.04.2015)
 */
public class GameLogic
{
	private Player player[];
	private int fieldSize;
	private GameOptions game = new GameOptions();
	private BattleField[] field;

	public void StartGame(){

		initGameOptions();
		initGamePlayer();
		setShipsToField();
		startRound();
	}

	/**
	 * Ruft die für das Spiel benötigten Startwerte auf sowie die Spieloption 
	 */
	private void initGameOptions(){
		game.initGame();
		int size = game.getFieldSize();

		this.player = new Player[game.getPlayer()];
		this.fieldSize = size;
	}


	/**
	 * Legt die zuvor vom Anwender festgelegten 
	 * einzelnen Spieler mit ihren Spielfeldern und Schiffen an
	 * der erste in den Startoptionen festgelegte Spieler wird das Spiel beginnen
	 */
	private void initGamePlayer(){
		boolean isPlayerFirst = true;
		String[] names = game.getPlayerNames(); 

		for(int i = 0; i < this.player.length; i++){
			BattleField battleField = new BattleField(game.getFieldSize(), names[i]);
			player[i] = new Player(isPlayerFirst, game.getShips(), game.getDestroyer(), 
					game.getFrigate(), game.getCorvette(), game.getSubmarine(), names[i], battleField, this.player.length);
			isPlayerFirst = false;
		}

	}

	/**
	 *  Positionierung der Schiffe von jedem Spieler (nacheinander)
	 */
	private void setShipsToField(){
		IO.println("Der Reihe nach platziert jeder Spieler sein Schiffe!");

		for(int i = 0; i < player.length; i++){
			//Index für Spieler 1, Spieler 2 etc..
			int c = i+1;

			/*
			 * Das Spielfeld des Spieler wird auf der Konsole ausgedruckt
			 * und seine Schiffe vorbereitet
			 */
			IO.println(player[i].getPlayerName() + " : ");
			player[i].getPrivateField().printField();
			int destroyer = player[i].getDestroyer().length;
			int frigate = player[i].getFrigate().length;
			int corvette = player[i].getCorvette().length;
			int submarine = player[i].getSubmarine().length;

			IO.println("Spieler \"" + player[i].getPlayerName() + "\" ist an der reihe: \n Bitte geben sie die Koordinaten ein (X,Y)");

			/*
			 * der Benutzer aufgefordert seine Schiffe zu positionieren
			 * Solange wie die eingegebenen Koordinaten ungültig sind,
			 * wird erneut aufgefordert das Schiff zu positionieren
			 */

			//ZERSTÖRER
			for(int d = destroyer; d > 0; d--){
				IO.println("Zerstörer (" + d + ")");
				boolean checked = false;

				while(checked == false){

					String pos = IO.readString();
					int[] koordinaten = checkPos(pos);

					if(koordinaten == null){
						IO.println("Fehler in der Eingabe! (X, Y)");
					}
					else{
						IO.println("Horizontal h \nVertikal v");
						char orientation = IO.readChar();
						if(player[i].getPrivateField().setShips(EShipType.DESTROYER, koordinaten[0], koordinaten[1], orientation) == true){
							player[i].getPrivateField().printField();
							checked = true;
						}
						else{
							IO.println("Schiff kann dort nicht positioniert werden!\nBitte erneut Koordinaten eingeben");
						}
					}
				}
			}

			//FREGATTE
			for(int f = frigate; f > 0; f--){
				IO.println("Fregatte (" + f + ")");
				boolean checked = false;

				while(checked == false){

					String pos = IO.readString();
					int[] koordinaten = checkPos(pos);

					if(koordinaten == null){
						IO.println("Fehler in der Eingabe! (X, Y)");
					}
					else{
						IO.println("Horizontal h \nVertikal v");
						char orientation = IO.readChar();
						if(player[i].getPrivateField().setShips(EShipType.FRIGATE, koordinaten[0], koordinaten[1], orientation) == true){
							player[i].getPrivateField().printField();
							checked = true;
						}
						else{
							IO.println("Schiff kann dort nicht positioniert werden!\nBitte erneut Koordinaten eingeben");
						}
					}
				}
			}

			//KORVETTE
			for(int k = corvette; k > 0; k--){
				IO.println("Korvette (" + k + ")");
				boolean checked = false;

				while(checked == false){

					String pos = IO.readString();
					int[] koordinaten = checkPos(pos);

					if(koordinaten == null){
						IO.println("Fehler in der Eingabe! (X, Y)");
					}
					else{
						IO.println("Horizontal h \nVertikal v");
						char orientation = IO.readChar();
						if(player[i].getPrivateField().setShips(EShipType.CORVETTE, koordinaten[0], koordinaten[1], orientation) == true){
							player[i].getPrivateField().printField();
							checked = true;
						}
						else{
							IO.println("Schiff kann dort nicht positioniert werden!\nBitte erneut Koordinaten eingeben");
						}
					}
				}
			}

			//UBOOT
			for(int s = submarine; s > 0; s--){
				IO.println("UBoot (" + s + ")");
				boolean checked = false;

				while(checked == false){

					String pos = IO.readString();
					int[] koordinaten = checkPos(pos);

					if(koordinaten == null){
						IO.println("Fehler in der Eingabe! (X, Y)");
					}
					else{
						IO.println("Horizontal h \nVertikal v");
						char orientation = IO.readChar();

						if(player[i].getPrivateField().setShips(EShipType.SUBMARINE, koordinaten[0], koordinaten[1], orientation) == true){
							player[i].getPrivateField().printField();
							checked = true;
						}
						else{
							IO.println("Schiff kann dort nicht positioniert werden!\nBitte erneut Koordinaten eingeben");
						}
					}
				}
			}
		}
	}


	/**
	 * @param pos - die zu überprüfenden Koordinaten 
	 * @return Gibt zurück, ob die eingegebenen Koordinaten korrekt sind
	 */
	private int[] checkPos(String pos){
		pos = pos.replaceAll("\\s+", "");
		String[] sKoordinaten = pos.split(",");
		int[] iKoordinaten = new int[2];

		if(sKoordinaten.length != 2){
			return null;
		}
		for(int i = 0; i < 2; i++){
			int toInt = Integer.parseInt(sKoordinaten[i]);
			if(toInt < 0 || toInt > fieldSize){
				return null;
			}
			else{
				iKoordinaten[i] = toInt;
			}
		}

		return iKoordinaten;
	}

	private void startRound(){

		boolean gameHasEnded = false;
		int round = 1;

		while(gameHasEnded == false){

			for(int i = 0; i < this.player.length; i++){
				IO.println("Spieler - \"" + this.player[i].getPlayerName() + "\" ist an der Reihe. \nWähle einen Gegner aus: ");
				this.printEnemyList(i);
				boolean enemyIsChoosen = false;
				int enemyId = -1;

				while(enemyIsChoosen == false){

					enemyId = IO.readInt();

					if( (enemyId < (this.player.length-1))  && (enemyId >= 0) && (enemyId != i) ){
						IO.println("Spieler \" " + this.player[enemyId] + "\" wurde ausgewählt!");
						enemyIsChoosen = true;
					}
					else{
						System.out.println("Ungültige Auswahl! Bitte Gegner auswählen: ");
					}
				}

				if(enemyId > -1){
					this.player[enemyId].getPublicField().printField();
				}

				System.out.println("Wählen sie nun eines Ihrer Schiffe zum Schiessen aus: ");
				this.printShipList(i);

			}
		}

	}

	private void printEnemyList(int player){

		//Druckt eine Liste aller noch im Spiel aktiven Spieler aus
		for(int j = 0; j < this.player.length; j++){
			if(j != player){
				if(this.player[j].isAlive() == true){
					IO.println(this.player[j].getPlayerName() + " (" + j + ")");
				}
			}
		}

	}

	private void printShipList(int id){
		Player playerOnTurn = this.player[id];

		/*
		 * Anzahl der Zerströrer ausgeben, welche nicht am Laden sind
		 */
		int destroyer = 0;
		
		for(int d = 0; d < playerOnTurn.getDestroyer().length; d++){
			if(playerOnTurn.getDestroyer()[d].isLoaded()){
				destroyer++;
			}

		}
		System.out.println(destroyer + "x Zerstörer (1)");


		/*
		 * Anzahl der Fregatten ausgeben, welche nicht am Laden sind
		 */
		int frigate = 0;

		for(int f = 0; f < playerOnTurn.getFrigate().length; f++){
			if(playerOnTurn.getFrigate()[f].isLoaded()){
				frigate++;
			}

		}
		System.out.println(frigate + "x Fregatte (2)");

		/*
		 * Anzahl der Korvetten ausgeben, welceh nicht am Laden sind
		 */
		int corvette = 0;

		for(int c = 0; c < playerOnTurn.getCorvette().length; c++){
			if(playerOnTurn.getCorvette()[c].isLoaded()){
				corvette++;
			}

		}
		System.out.println(corvette + "x Korvette (3)");

		/*
		 * Anzahl der UBoote ausgeben welche nicht am Laden sind
		 */
		int submarine = 0;

		for(int s = 0; s < playerOnTurn.getSubmarine().length; s++){
			if(playerOnTurn.getSubmarine()[s].isLoaded()){
				submarine++;
			}

		}
		System.out.println(submarine + "x UBoote (4)");


	}

}

