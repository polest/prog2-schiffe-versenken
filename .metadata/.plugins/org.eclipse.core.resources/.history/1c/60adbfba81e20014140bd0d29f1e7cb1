
/**
 * Write a description of class MatrixTools here.
 * 
 * @author ML 
 * @version 09.12.14
 */
public class MatrixTools
{
	public void print(String[][] matrix){

		String[][] printMatrix = new String[matrix.length+1][matrix.length+1];

		for(int i = 0; i < printMatrix.length; i++){

			for(int j = 0; j < printMatrix.length; j++){

				if(i == 0){
					if(j == 0){
						printMatrix[i][j] = " x ";
					}
					else{
						printMatrix[i][j] = " " + j + " ";
					}
				}
				else{
					if(j == 0){
						printMatrix[i][j] = " " + i + " ";
					}
					else{
						int index = i-1;
						int jIndex = j-1;

						printMatrix[i][j] = matrix[index][jIndex];
					}
				}
			}

		}


		for(int i = 0; i < printMatrix[0].length; i++){
			IO.print("\u250C");
			for(int k = 0; k < printMatrix[0].length; k++){
				if(k == 0){
					IO.print("\u2500\u2500\u2500");
				}
				else{
					IO.print("\u2500\u2500\u2500\u2500");
				}
			}
			IO.print("\u2510");
			IO.println("");
			for(int j = 0; j < printMatrix.length; j++){
				IO.print("\u2502" + printMatrix[j][i]);
				//IO.print("\t");
			}

			IO.print("\u2502");
			IO.println("");
		}
		IO.print("\u2514");

		for(int l = 0; l < printMatrix[0].length; l++){
			if(l == 0){
				IO.print("\u2500\u2500\u2500");
			}
			else{
				IO.print("\u2500\u2500\u2500\u2500");
			}
		}
		IO.print("\u2518");
		IO.println("");

	}

	public String[][] initMatrix(String[][] matrix){	

		for(int i = 0; i < matrix[0].length; i++){
			for(int j = 0; j < matrix.length; j++){
				//Füllt Matrix mit Tilde Symbol 
				matrix[j][i] = " \u223C ";
			}
		}
		return matrix;
	}

	public String[][] addMatrix(int ival, int jval, char orientation, String[][]matrix, EShipType ship ){	
		String shipSymbol = "X";
		int length = 0;

		switch(ship){
		case DESTROYER:
			shipSymbol = "D";
			length = 5;
			break;

		case FRIGATE:
			shipSymbol = "F";
			length = 4;
			break;

		case CORVETTE:
			shipSymbol = "C";
			length = 3;
			break;

		case SUBMARINE:
			shipSymbol = "S";
			length = 2;
			break;
		}

		if(orientation == 'v'){
			for(int j = jval-1; j < (jval-1)+length; j++){
				//Füllt Matrix mit ShiffZahl Symbol 
				matrix[ival-1][j] = " "+ shipSymbol+" ";
			}
		}
		else{

			for(int i = ival-1; i < (ival-1)+length; i++){
				//Füllt Matrix mit ShiffZahl Symbol 
				matrix[i][jval-1] = " "+ shipSymbol+" ";
			}
		}
		return matrix;
	}

	public boolean checkFields(int ival, int jval, char orientation, String[][]matrix, EShipType ship){

		String shipSymbol = "X";
		int length = 0;

		switch(ship){
		case DESTROYER:
			shipSymbol = "D";
			length = 5;
			break;

		case FRIGATE:
			shipSymbol = "F";
			length = 4;
			break;

		case CORVETTE:
			shipSymbol = "C";
			length = 3;
			break;

		case SUBMARINE:
			shipSymbol = "S";
			length = 2;
			break;
		}

		if(orientation == 'v'){
			if( (jval + length) > matrix.length){
				return false;
			}
			else{
				for(int j = jval-1; j < (jval-1)+length; j++){
					//Prüft Matrix auf Shiffe 
					//Prüfe Position auf Nachbarn
					int jIndex = j;
					int iIndex = ival;
					//1.Feld
					if(j > 0){
						if(j == jval-1){
							for(int k = jIndex - 1; k <= jIndex; k++){
								for(int l = iIndex - 1; l <= iIndex + 1; l++)
									if(matrix[k][l] != " \u223C "){
										return false;
									}
							}
						}
						//Alle Schiffpositionen innerhalb
						else if(j < ((jval-1)+length) - 1){
							for(int l = iIndex - 1; l <= iIndex + 1; l++)
								if(matrix[j][l] != " \u223C "){
									return false;
								}
						}
						//Letzte Schiffposition
						else{
							for(int k = jIndex; k <= jIndex + 1; k++){
								for(int l = iIndex - 1; l <= iIndex + 1; l++)
									if(matrix[k][l] != " \u223C "){
										return false;
									}
							}
						}
					}
				}
			}
		}
		else if(orientation == 'h'){
			if( (ival + length) > matrix.length){
				return false;
			}
			else{
				for(int i = ival-1; i < (ival-1)+length; i++){
					//Prüft Matrix auf Shiffe 
					//Prüfe Position auf Nachbarn
					int iIndex = i;
					int jIndex = jval;
					if(i > 0){
						//1.Feld

						if(i == ival-1){
							for(int k = iIndex - 1; k <= iIndex; k++){
								for(int l = jIndex - 1; l <= jIndex + 1; l++)
									if(matrix[k][l] != " \u223C "){
										return false;
									}
							}
						}
						//Alle Schiffpositionen innerhalb
						else if(i < ((ival-1)+length) - 1){
							for(int l = jIndex - 1; l <= jIndex + 1; l++)
								if(matrix[l][i] != " \u223C "){
									return false;
								}
						}
						//Letzte Schiffposition
						else{
							for(int k = iIndex; k <= iIndex + 1; k++){
								for(int l = jIndex - 1; l <= jIndex + 1; l++)
									if(matrix[l][i] != " \u223C "){
										return false;
									}
							}
						}
					}
				}
			}
		}
		return true;

	}

}
