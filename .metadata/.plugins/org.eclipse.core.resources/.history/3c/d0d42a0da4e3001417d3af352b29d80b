package GameLogic;
import org.omg.CORBA.FREE_MEM;

import GameTools.EShipType;
import GameTools.IO;


public class GameOptions {

	private int player;
	private String[] playerNames;
	private int fieldSize;
	private int destroyer;
	private int frigate;
	private int corvette;
	private int submarine;
	private int ships;


	/**
	 * Kontruktor der Optionen
	 * Setzt Standard Werte der Einstellungen
	 */
	public GameOptions(){
		this.player = 2;
		this.fieldSize = 10;
		this.destroyer = 1;
		this.frigate = 1;
		this.corvette = 1;
		this.submarine = 1;
		this.ships = 4;

		this.playerNames = new String[2];
		this.playerNames[0] = "Spieler 1";     
		this.playerNames[1] = "Spieler 2";

	}

	/**
	 * Spielstart ruft die Optionen für Spieler, Spielfeld und Schiffe auf
	 */
	public void initGame(){
		IO.println("Willkommen bei BATTLESHIP special LARS edition!\n"
				+ "um das Spiel zu beginnen, müssen Sie zunächst einmal\n"
				+ "das Spiel konfigurieren.");

		initPlayer();
		initField();
		initShips();
	}


	/**
	 * @return gibt die Anzahl der Spieler zurück
	 */
	public int getPlayer() {
		return player;
	}

	/**
	 * @return gibt die festgelegte Feldgröße zurück
	 */
	public int getFieldSize() {
		return fieldSize;
	}

	/**
	 * @return gibt die festgelegte Anzahl an Zerstörern zurück
	 */
	public int getDestroyer() {
		return destroyer;
	}

	/**
	 * @return gibt die festgelegte Anzahl an Fregatten zurück
	 */
	public int getFrigate() {
		return this.frigate;
	}


	/**
	 * @return gibt die festgelegte Anzahl an Korvetten zurück
	 */
	public int getCorvette() {
		return corvette;
	}

	/**
	 * @return gibt die festgelegte Anzahl an UBooten zurück
	 */
	public int getSubmarine() {
		return submarine;
	}


	/**
	 * @return gibt die Liste der Spielernamen zurück
	 */
	public String[] getPlayerNames(){
		return this.playerNames;
	}

	/**
	 * @return gibt die gesamt Anzahl an Schiffen zurück
	 */
	public int getShips(){
		return ships;
	}

	/**
	 * Einstellungen der Spieleranzahl und ihre Namen
	 */
	private void initPlayer(){

		IO.println("Bitte wählen sie die Anzahl der Spieler aus [2-6]: ");
		int anzahl = IO.readInt();

		while(anzahl < 2 || anzahl > 6){
			IO.println("Ungültige Eingabe. Bitte zwischen 2-6 auswählen!");
			anzahl = IO.readInt();
		}

		this.player = anzahl;
		this.playerNames = new String[anzahl];
		for(int i = 0; i < anzahl; i++){
			int c = i+1;
			IO.println("Spieler " + c + " Name: ");
			this.playerNames[i] = IO.readString();

		}
	}

	/**
	 * Einstellung der Größe des Spielfeldes
	 */
	private void initField(){
		IO.println("Bitte geben sie die Seitengröße des quadratischen Feldes ein: (mind. 6!)");

		int anzahl = IO.readInt();

		while(anzahl < 6 || anzahl > 50){
			if(anzahl != 50){
				IO.println("Ungültige Eingabe. Bitte eine Zahl größer als 5 eingeben!");
			}
			else{
				IO.println("Ein Spielfeld von einer Größe ab 50 ist zu riesig! Erneut eingeben:");

			}
			anzahl = IO.readInt();
		}

		this.fieldSize = anzahl;
	}

	/**
	 * Einstellung der Anzahl jeweiliger Schiffe
	 */
	private void initShips(){
		IO.println("Wählen sie die Anzahl der jeweiligen Schiffe." 
				+ "\nBei nicht eingegebener Anzahl wird der standart Wert von 1 je Schiff eingetragen.");
		int temp = 0;
		boolean checked = false;
		final int destroyerSize = 17;
		final int frigateSize = 14;
		final int corvetteSize = 11;
		final int submarineSize = 8;
		
		int totalSizeOfShipSpaceDefault = 50;
		int spaceLeftInField = ( ( this.fieldSize * this.fieldSize) - totalSizeOfShipSpaceDefault )  - (this.fieldSize * 4);
		
		IO.println("Bitte geben sie nun die Anzahl der Schiffe an:\n"
				+"Zerströrer:");

		while(checked == false){
			temp = IO.readInt();
			if((spaceLeftInField % temp) > 10){
				this.destroyer = temp;
				checked = true;
				
			}
			else{
				IO.println("Die Anzahl von " + temp + " Zerstörern bei einer Feldgröße von "
						+ this.fieldSize + " ist nicht möglich, da die Schiffe keinen Ausreichenden Platz "
						+ "zur Verfügung hätten. Bitte erneut eingeben!");
			}
		}

		temp = 0;
		checked = false;
		
		IO.println("Fregatten:");
		
		while(checked == false){
			temp = IO.readInt();
			if(checkShipSizeToFieldSize(EShipType.FRIGATE, temp) == true){
				this.frigate = temp;
				checked = true;
			}
			else{
				IO.println("Die Anzahl von " + temp + " Fregatten bei einer Feldgröße von "
						+ this.fieldSize + " ist nicht möglich, da die Schiffe keinen Ausreichenden Platz "
						+ "zur Verfügung hätten. Bitte erneut eingeben!");
			}
		}
		
		temp = 0;
		checked = false;
		
		
		IO.println("Korvetten:");
		while(checked == false){
			temp = IO.readInt();
			if((spaceLeftInField % temp) > 10){
					this.corvette = temp;
				checked = true;
			}
			else{
				IO.println("Die Anzahl von " + temp + " Korvetten bei einer Feldgröße von "
						+ this.fieldSize + " ist nicht möglich, da die Schiffe keinen Ausreichenden Platz "
						+ "zur Verfügung hätten. Bitte erneut eingeben!");
			}
		}
		
		temp = 0;
		checked = false;
		
		IO.println("UBoote:");
		
		while(checked == false){
			temp = IO.readInt();
			if((spaceLeftInField % temp) > 10){
					this.submarine = temp;
				checked = true;
			}
			else{
				IO.println("Die Anzahl von " + temp + " UBooten bei einer Feldgröße von "
						+ this.fieldSize + " ist nicht möglich, da die Schiffe keinen Ausreichenden Platz "
						+ "zur Verfügung hätten. Bitte erneut eingeben!");
			}
		}
		this.ships = this.destroyer + this.frigate + this.corvette + this.submarine;
	}



}
