package GameTools;


/**
 * Write a description of class MatrixTools here.
 * 
 * @author ML 
 * @version 09.12.14
 */
public class MatrixTools
{
	private final char black ='\u25A0';
	private final char wave ='\u223C';

	/**
	 * @param matrix 
	 * Druckt die Matrix als Spielfeld 
	 * mit Grafischen Extras auf der Konsole aus
	 * Die Matrix mit verschönerungen wird nur ausgedruckt und 
	 * nicht gespeichert oder zurückgegeben!
	 */
	public void printPrivateField(int[][] matrix){

		int[][] printMatrix = new int[matrix.length+1][matrix.length+1];


		for(int y = 0; y < printMatrix.length; y++){
			String leftAlignFormat = "| %-3s ";
			boolean isSmallField = true;

			if(matrix.length > 9){
				isSmallField  = true;
			}
			else{
				isSmallField = false;
			}

			for(int f = 0; f < printMatrix.length; f++){

				System.out.format("+-----");
			}

			System.out.print("+ \n");

			for(int x = 0; x < printMatrix.length; x++){


				if( (x == 0) && (y == 0)){
					System.out.format(leftAlignFormat, "y\\x");
				}
				else if(y == 0){
					if(isSmallField == true && x < 10){

						System.out.format(leftAlignFormat, " " + x);
					}
					else{
						System.out.format(leftAlignFormat, x);

					}

				}
				else if(x == 0){
					if(isSmallField == true && x < 10){

						System.out.format(leftAlignFormat, " " + y);
					}
					else{
						System.out.format(leftAlignFormat, y);
					}
				}
				else{

					if(matrix[y-1][x-1] == 0){
						System.out.format(leftAlignFormat," " + wave);

					}
					else{
						System.out.format(leftAlignFormat, " " + black);

					}
				}

			}
			System.out.println("");
		}

		for(int f = 0; f < printMatrix.length; f++){

			System.out.format("+-----");
		}

		System.out.print("+ \n");

	}

	/*
	 * Nun die eigentlichen Werte des Spielfeldes mit Strichen und Eck-Symbolen
	 * um optisch ein Rastergitter zu erhalten
	 * \u250C - obere linke Ecke
	 * \u2500 - horizontale Striche
	 * \u2510 - obere rechte Ecke
	 * \u2502 - senkrechte Striche
	 * \u2514 - untere linke Ecke
	 * \u2518 - untere rechte Ecke
	 */



	/**
	 * @param matrix - Spielfeld Matrix
	 * @return gibt die grafische Ausgangs Matrix (Spielfeld) zurück
	 * Das Spielfeld wird standardmäßig mit Tilden für nicht belegte Felder gefüllt
	 * 
	 */
	public int[][] initMatrix(int[][] matrix){	

		for(int i = 0; i < matrix.length; i++){
			for(int j = 0; j < matrix.length; j++){
				//Füllt Matrix mit Tilde Symbol 
				matrix[i][j] = 0;
			}
		}
		return matrix;
	}

	/**
	 * @param ival - Benutzereingabe X-Koordinate
	 * @param jval - Benutzereingabe Y-Koordinate
	 * @param orientation - Benutzereingabe Richtung der Schiffspositionierung
	 * @param matrix - Spielfeld des jeweiligen Spielers
	 * @param ship - ausgewählte Schiff
	 * @return Gibt das mit dem ausgewähltem Schiff positionierte Spielfeld zurück 
	 */
	public int[][] addMatrix(int ival, int jval, char orientation, int[][]matrix, EShipType ship ){	
		//Koordinaten beginnen ab 1, Array aber ab 0 daher um 1 inkrementieren für equivalenten Wert
		ival--;
		jval--;

		int shipSymbol = 0;
		int length = 0;

		/*Je nach ausgewähltem Schiffstyp 
		 *ein Kennzeichnungssymbol sowie die Schiffslänge setze
		 */
		switch(ship){
		case DESTROYER:
			shipSymbol = 1;
			length = 5;
			break;

		case FRIGATE:
			shipSymbol = 2;
			length = 4;
			break;

		case CORVETTE:
			shipSymbol = 3;
			length = 3;
			break;

		case SUBMARINE:
			shipSymbol = 4;
			length = 2;
			break;
		}

		//Bei vertikaler Ausrichtung des Schiffes
		if(orientation == 'h'){
			for(int j = jval; j < jval + length; j++){
				//Füllt Matrix mit dem Symbol des jeweiligen Schiffes
				matrix[ival][j] = shipSymbol;
			}
		}
		//Bei horizontaler Ausrichtung des Schiffes
		else{

			for(int i = ival; i < ival+length; i++){
				//Füllt Matrix mit dem Symbol des jeweiligen Schiffes
				matrix[i][jval] = shipSymbol;
			}
		}
		return matrix;
	}


	/**
	 * @param ival - Benutzereingabe X-Koordinate
	 * @param jval - Benutzereingabe Y-Koordinate
	 * @param orientation - Benutzereingabe Richtung der Schiffspositionierung
	 * @param matrix - Spielfeld des jeweiligen Spielers
	 * @param ship - ausgewählte Schiff
	 * @return Ein boolschen Wert, ob das Schiff an der ausgewählten Position und Ausrichtung
	 * basierend auf den Spielregeln positioniert werden kann oder nicht
	 */
	public boolean checkPrivateFields(int ival, int jval, char orientation, int[][]matrix, EShipType ship){
		//Koordinaten beginnen ab 1, Array aber ab 0 daher um 1 inkrementieren für equivalenten Wert
		ival--;
		jval--;

		int length = 0;

		//Schifflänge anhand des Ausgewählten Schiffes
		switch(ship){
		case DESTROYER:
			length = 5;
			break;

		case FRIGATE:
			length = 4;
			break;

		case CORVETTE:
			length = 3;
			break;

		case SUBMARINE:
			length = 2;
			break;
		}

		int jIndex = jval;
		int iIndex = ival;
		int jMarginTop = 1;
		int iMarginLeft = 1;
		int jMarginBottom = 1;
		int iMarginRight = 1;

		//Bei vertikaler Ausrichtung
		if(orientation == 'v'){

			/*
			 * Da die Umgebenen Positionen des Schiffes geprüft werden,
			 * muss der Abstand nach links, rechts, oben oder unten
			 * auf 0 gesetzt werden, sofern es in einer der Ecken beginnt oder
			 * die Länge einer dieser Ecken erreicht
			 * 
			 * Ansonsten wird der Abstand als 1 Feld links/oben, das eigene Feld sowie 1 Feld rechts/unten
			 * mitüberprüft
			 * -> sonst ArrayOutOfBounds
			 */

			//obere Ecke
			if(jIndex == 0){
				jMarginTop = 0;
			}
			//linke Ecke
			if(iIndex == 0){
				iMarginLeft = 0;
			}
			//untere Ecke
			if( (jIndex + length) == matrix.length){
				jMarginBottom = 0;
			}
			//rechte Ecke
			if(iIndex == (matrix.length - 1) ){
				iMarginRight = 0;
			}

			//Koordinaten Länge des Schiffes ab der gewählten Position
			int shipLength = jIndex + length;

			/*Wenn die Schiffslänge ab den gewählten Startkoordinaten 
			 * länger ist als die Feldlänge, ist eine positionierung nicht möglich
			 */
			if(shipLength > matrix.length){
				return false;
			}

			/*
			 * Ansonsten, prüfe nun ob das Schiff in Vertikaler ausrichtung 
			 * an ein anderes Schiff anrenzt
			 */
			for(int j = (jIndex - jMarginTop); j < (shipLength + jMarginBottom); j++ ){
				for( int i = (iIndex - iMarginLeft); i <= (iIndex + iMarginRight); i++){
					//TESTAUSGABE IO.println("j: " + j + " i: " + i);
					if(matrix[i][j] > 0){
						return false;
					}
				}
			}
		}
		else{

			//obere Ecke
			if(jIndex == 0){
				jMarginTop = 0;
			}
			//linke Ecke
			if(iIndex == 0){
				iMarginLeft = 0;
			}
			//untere Ecke
			if( jIndex == (matrix.length - 1) ){
				jMarginBottom = 0;
			}
			//rechte Ecke
			if( (iIndex + length ) == matrix.length ){
				iMarginRight = 0;
			}
			int shipLength = iIndex + length;

			/*Wenn die Schiffslänge ab der gewählten Startkoordinaten 
			 * länger ist als die Feldlänge, ist eine positionierung nicht möglich
			 */
			if( (shipLength) > matrix.length){
				return false;
			}

			/*
			 * Ansonsten, prüfe nun ob das Schiff in Vertikaler ausrichtung 
			 * an ein anderes Schiff anrenzt
			 */
			for(int j = (jIndex - jMarginTop); j <= (jIndex + jMarginBottom); j++ ){
				for( int i = (iIndex - iMarginLeft); i < (shipLength + iMarginRight); i++){
					//TESTAUSGABE IO.println("j: " + j + " i: " + i);
					if(matrix[i][j] > 0){
						return false;
					}
				}
			}
		}
		return true;

	}

	
	public boolean checkPublicField(EShipType ship, int[] coordinates, char orientation, int[][] publicField){
		
	}

	public void attackField(EShipType ship, int[] coordinates, char orientation, int[][] publicField, int[][] privateField){

		int shootLength = 0;

		switch(ship){
		case CORVETTE:
			shootLength = 1;
			break;
		case DESTROYER:
			shootLength = 2;
			break;
		case FRIGATE:
			shootLength = 3;
			break;
		case SUBMARINE:
			shootLength = 1;
			break;
		default:
			break;

		}

		int x = coordinates[0];
		int y = coordinates[1];

		if(orientation == 'h'){

			for(x = 0; x < shootLength; x++){
				if(privateField[y][x] > 0){

					publicField[y][x] = 1;
				}
				else{
					publicField[y][x] = 2;
				}

			}
		}
		else{
			for(y = 0; y < shootLength; y++){
				if(privateField[y][x] > 0){

					publicField[y][x] = 1;
				}
				else{
					publicField[y][x] = 2;
				}

			}

		}
		
		printPublicField(publicField);
	}
	
	public void printPublicField(int[][] publicField){
		
		
		
	}
	

}
